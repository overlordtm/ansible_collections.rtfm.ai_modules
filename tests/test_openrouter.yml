---
- name: Test OpenRouter Module
  hosts: localhost
  gather_facts: no
  vars:
    openrouter_api_key: "{{ lookup('env', 'OPENROUTER_API_KEY') }}"
    test_prompt: "What is the capital of France? Answer in one word."

  tasks:
    - name: Check if OpenRouter API key is set
      fail:
        msg: "OPENROUTER_API_KEY environment variable is not set"
      when: openrouter_api_key | length == 0

    - name: Test basic OpenRouter functionality with GPT-3.5
      rtfm.ai_modules.openrouter:
        api_key: "{{ openrouter_api_key }}"
        prompt: "{{ test_prompt }}"
        model: "openai/gpt-3.5-turbo"
        temperature: 0.1
        max_tokens: 10
      register: basic_test

    - name: Display basic test result
      debug:
        msg: "Response: {{ basic_test.result.text }}"

    - name: Test with system message
      rtfm.ai_modules.openrouter:
        api_key: "{{ openrouter_api_key }}"
        prompt: "Analyze this log entry: [INFO] User login successful for admin@example.com"
        system_message: "You are a cybersecurity analyst. Analyze log entries for potential security issues."
        model: "openai/gpt-3.5-turbo"
        temperature: 0.5
        max_tokens: 100
      register: system_test

    - name: Display system message test result
      debug:
        msg: "Security analysis: {{ system_test.result.text }}"

    - name: Test with Claude model
      rtfm.ai_modules.openrouter:
        api_key: "{{ openrouter_api_key }}"
        prompt: "Explain what a firewall does in one sentence."
        model: "anthropic/claude-3-haiku"
        temperature: 0.3
        max_tokens: 50
      register: claude_test

    - name: Display Claude test result
      debug:
        msg: "Claude response: {{ claude_test.result.text }}"

    - name: Test raw JSON output
      rtfm.ai_modules.openrouter:
        api_key: "{{ openrouter_api_key }}"
        prompt: "List 3 colors"
        model: "openai/gpt-3.5-turbo"
        temperature: 0.3
        raw_json_output: true
      register: raw_test

    - name: Display raw response structure
      debug:
        var: raw_test.raw_response

    - name: Test with frequency and presence penalties
      rtfm.ai_modules.openrouter:
        api_key: "{{ openrouter_api_key }}"
        prompt: "Describe network security best practices. Focus on unique points."
        model: "openai/gpt-3.5-turbo"
        temperature: 0.7
        max_tokens: 150
        frequency_penalty: 0.5
        presence_penalty: 0.3
      register: penalty_test

    - name: Display penalty test result
      debug:
        msg: "With penalties: {{ penalty_test.result.text }}"

    - name: Test error handling - invalid model
      rtfm.ai_modules.openrouter:
        api_key: "{{ openrouter_api_key }}"
        prompt: "Hello"
        model: "invalid/model-name"
      register: error_test
      ignore_errors: yes

    - name: Display error handling result
      debug:
        msg: "Error test result: {{ error_test.msg if error_test.failed else 'Unexpected success' }}"

    - name: Test parameter validation - temperature out of range
      rtfm.ai_modules.openrouter:
        api_key: "{{ openrouter_api_key }}"
        prompt: "Hello"
        temperature: 3.0
      register: validation_test
      ignore_errors: yes

    - name: Display validation test result
      debug:
        msg: "Validation test: {{ validation_test.msg if validation_test.failed else 'Unexpected success' }}"

    - name: Test authentication error with invalid key
      rtfm.ai_modules.openrouter:
        api_key: "invalid-key-12345"
        prompt: "Hello"
        model: "openai/gpt-3.5-turbo"
      register: auth_test
      ignore_errors: yes

    - name: Display auth test result
      debug:
        msg: "Auth test: {{ auth_test.msg if auth_test.failed else 'Unexpected success' }}"

    - name: Summary of all tests
      debug:
        msg: |
          Test Results Summary:
          - Basic functionality (GPT-3.5): {{ 'PASS' if basic_test.result.text is defined else 'FAIL' }}
          - System message: {{ 'PASS' if system_test.result.text is defined else 'FAIL' }}
          - Claude model: {{ 'PASS' if claude_test.result.text is defined else 'FAIL' }}
          - Raw JSON output: {{ 'PASS' if raw_test.raw_response is defined else 'FAIL' }}
          - Penalty parameters: {{ 'PASS' if penalty_test.result.text is defined else 'FAIL' }}
          - Error handling: {{ 'PASS' if error_test.failed else 'FAIL' }}
          - Parameter validation: {{ 'PASS' if validation_test.failed else 'FAIL' }}
          - Authentication error: {{ 'PASS' if auth_test.failed else 'FAIL' }}